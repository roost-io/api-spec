# ********RoostGPT********

# Test generated by RoostGPT for test k-api-dbrx-may23 using AI Type DBRX and AI Model meta-llama-3-70b-instruct-041824
# 
# Test generated by RoostGPT for test k-api-dbrx-may23 using AI Type DBRX and AI Model meta-llama-3-70b-instruct-041824
# 
# Feature file generated for /nobelPrize/{category}/{year}_get for http method type GET 
# RoostTestHash=9818bf6b39
# 
# 

# ********RoostGPT********
Feature: Obtain information about one specific Nobel Prize

  Background:
    * def urlBase = karate.properties['urlBase'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase

  Scenario: Get Nobel Prize by category and year
    Given path '2.1', 'nobelPrize', 'physics', '2015'
    When method get
    Then status 200
    And match response ==
      """
      {
        "nobelPrize": {
          "awardYear": "#number",
          "category": {
            "en": "#string",
            "se": "#string",
            "false": "#string"
          },
          "categoryFullName": {
            "en": "#string",
            "se": "#string",
            "false": "#string"
          },
          "dateAwarded": "#string",
          "prizeAmount": "#number",
          "prizeAmountAdjusted": "#number",
          "topMotivation": {
            "en": "#string",
            "se": "#string",
            "false": "#string"
          },
          "laureates": "#array"
        }
      }
      """
    And match response.nobelPrize.awardYear == 2015
    And match response.nobelPrize.category.en == 'Physics'
    And match response.nobelPrize.category.se == 'Fysik'
    And match response.nobelPrize.categoryFullName.en == 'Physics'
    And match response.nobelPrize.categoryFullName.se == 'Fysik'

  Scenario Outline: Get Nobel Prize by different categories and years
    Given path '2.1', 'nobelPrize', '<category>', '<year>'
    When method get
    Then status <statusCode>
    And match response ==
      """
      {
        "nobelPrize": {
          "awardYear": "#number",
          "category": {
            "en": "#string",
            "se": "#string",
            "false": "#string"
          },
          "categoryFullName": {
            "en": "#string",
            "se": "#string",
            "false": "#string"
          },
          "dateAwarded": "#string",
          "prizeAmount": "#number",
          "prizeAmountAdjusted": "#number",
          "topMotivation": {
            "en": "#string",
            "se": "#string",
            "false": "#string"
          },
          "laureates": "#array"
        }
      }
      """
    And match response.nobelPrize.awardYear == <year>
    And match response.nobelPrize.category.en == '<categoryNameEN>'
    And match response.nobelPrize.category.se == '<categoryNameSE>'
    And match response.nobelPrize.categoryFullName.en == '<categoryFullNameEN>'
    And match response.nobelPrize.categoryFullName.se == '<categoryFullNameSE>'

    Examples:
      | read('nobelPrize_category_year_get.csv') |

  Scenario Outline: Get Nobel Prize with invalid category
    Given path '2.1', 'nobelPrize', '<category>', '<year>'
    When method get
    Then status <statusCode>
    And match response ==
      """
      {
        "code": "#string",
        "message": "#string"
      }
      """

    Examples:
      | read('nobelPrize_category_year_get.csv') |

  Scenario Outline: Get Nobel Prize with invalid year
    Given path '2.1', 'nobelPrize', '<category>', '<year>'
    When method get
    Then status <statusCode>
    And match response ==
      """
      {
        "code": "#string",
        "message": "#string"
      }
      """

    Examples:
      | read('nobelPrize_category_year_get.csv') |

  Scenario Outline: Get Nobel Prize with non-existent year
    Given path '2.1', 'nobelPrize', '<category>', '<year>'
    When method get
    Then status <statusCode>
    And match response ==
      """
      {
        "code": "#string",
        "message": "#string"
      }
      """

    Examples:
      | read('nobelPrize_category_year_get.csv') |
