# ********RoostGPT********

# Test generated by RoostGPT for test k-api-dbrx-may23 using AI Type DBRX and AI Model meta-llama-3-70b-instruct-041824
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=41cb7e02aa
# 
# 

# ********RoostGPT********
---ROOST FEATURES START---

Feature: Get Laureates
  As a user
  I want to get a list of laureates
  So that I can access their information

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase

  Scenario Outline: Get Laureates with valid parameters
    Given params {
      offset: <offset>,
      limit: <limit>,
      sort: <sort>,
      ID: <ID>,
      name: <name>,
      gender: <gender>,
      motivation: <motivation>,
      affiliation: <affiliation>,
      residence: <residence>,
      birthDate: <birthDate>,
      birthDateTo: <birthDateTo>,
      deathDate: <deathDate>,
      deathDateTo: <deathDateTo>,
      foundedDate: <foundedDate>,
      birthCity: <birthCity>,
      birthCountry: <birthCountry>,
      birthContinent: <birthContinent>,
      deathCity: <deathCity>,
      deathCountry: <deathCountry>,
      deathContinent: <deathContinent>,
      foundedCity: <foundedCity>,
      foundedCountry: <foundedCountry>,
      foundedContinent: <foundedContinent>,
      HeadquartersCity: <HeadquartersCity>,
      HeadquartersCountry: <HeadquartersCountry>,
      HeadquartersContinent: <HeadquartersContinent>,
      nobelPrizeYear: <nobelPrizeYear>,
      yearTo: <yearTo>,
      nobelPrizeCategory: <nobelPrizeCategory>,
      format: <format>,
      csvLang: <csvLang>
    }
    When method GET
    Then status 200
    And match response.laureates == '#array'
    And match response.laureates[0].id == '#integer'
    And match response.laureates[0].laureateIfPerson == '#object'
    And match response.laureates[0].laureateIfOrg == '#object'
    And match response.laureates[0].wikipedia == '#object'
    And match response.laureates[0].wikidata == '#object'
    And match response.laureates[0].sameAs == '#array'
    And match response.laureates[0].links == '#array'
    And match response.laureates[0].nobelPrizes == '#array'
    And match response.meta.offset == '#integer'
    And match response.meta.limit == '#integer'
    And match response.meta.sort == '#string'
    And match response.meta.ID == '#integer'
    And match response.meta.name == '#string'
    And match response.meta.gender == '#string'
    And match response.meta.motivation == '#string'
    And match response.meta.affiliation == '#string'
    And match response.meta.residence == '#string'
    And match response.meta.birthDate == '#string'
    And match response.meta.birthDateTo == '#string'
    And match response.meta.deathDate == '#string'
    And match response.meta.deathDateTo == '#string'
    And match response.meta.foundedDate == '#string'
    And match response.meta.birthCity == '#string'
    And match response.meta.birthCountry == '#string'
    And match response.meta.birthContinent == '#string'
    And match response.meta.deathCity == '#string'
    And match response.meta.deathCountry == '#string'
    And match response.meta.deathContinent == '#string'
    And match response.meta.foundedCity == '#string'
    And match response.meta.foundedCountry == '#string'
    And match response.meta.foundedContinent == '#string'
    And match response.meta.headquartersCity == '#string'
    And match response.meta.headquartersCountry == '#string'
    And match response.meta.headquartersContinent == '#string'
    And match response.meta.nobelPrizeYear == '#integer'
    And match response.meta.yearTo == '#integer'
    And match response.meta.nobelPrizeCategory == '#string'
    And match response.meta.count == '#integer'
    And match response.links == '#array'
    And match response.links[0].first == '#string'
    And match response.links[0].prev == '#string'
    And match response.links[0].self == '#string'
    And match response.links[0].next == '#string'
    And match response.links[0].last == '#string'

    Examples:
      | offset | limit | sort | ID | name | gender | motivation | affiliation | residence | birthDate  | birthDateTo | deathDate  | deathDateTo | foundedDate | birthCity | birthCountry | birthContinent | deathCity | deathCountry | deathContinent | foundedCity | foundedCountry | foundedContinent | HeadquartersCity | HeadquartersCountry | HeadquartersContinent | nobelPrizeYear | yearTo | nobelPrizeCategory | format | csvLang |
      |      1 |    10 | asc  |  1 | John | male   | Physics    | University  | USA       | 1900-01-01 |  1900-01-01 | 1950-01-01 |  1950-01-01 |  1900-01-01 | New York  | USA          | North America  | New York  | USA          | North America  | New York    | USA            | North America    | New York         | USA                 | North America         |           1950 |   1955 | Physics            | json   | en      |
      |      2 |    20 | desc |  2 | Jane | female | Chemistry  | College     | UK        | 1910-01-01 |  1910-01-01 | 1960-01-01 |  1960-01-01 |  1910-01-01 | London    | UK           | Europe         | London    | UK           | Europe         | London      | UK             | Europe           | London           | UK                  | Europe                |           1960 |   1965 | Chemistry          | xml    | fr      |

  Scenario: Get Laureates with invalid parameters
    Given params {
      offset: 'invalid',
      limit: 'invalid'
    }
    When method GET
    Then status 400

  Scenario: Get Laureates without parameters
    When method GET
    Then status 422

---ROOST FEATURES END---
